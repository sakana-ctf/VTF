module sql_db

import db.sqlite
import os

// 到这里的定义之后可以抽时间删掉
fn add_challenge(db sqlite.DB, type_text string, flag []string, name string, diff string, intro string, max_score int, score int, container bool) {
	mut new_personal_flag := []PersonalFlag{}
	parents_id := sql db {
		select from Personal
	} or {
		[]Personal{}
	}
	for i in parents_id {
		new_personal_flag << PersonalFlag {
    	parents_id		:	i.pid
		complete        :	unsolved
		}
	}

	task_flag := []TaskFlag{}

	for i in flag {
		task_flag << PostFlag{
			flag	:	i
		}
	}

	new_task := Task{
        type_text  :    type_text
        flag       :    task_flag
        challenge  :    new_personal_flag
        name       :    name
        diff       :    diff
        intro      :    intro
        max_score  :    max_score
        score      :    score
        container  :    container
	}

	sql db {
		insert new_task into Task
	} or {
		println('Error: 添加失败')
	}
}

fn del_challenge(db sqlite.DB) {
	id := os.input('修改题目编号:\n>').int()
	sql db {
		delete from Task where tid == id
		delete from PostFlag where parents_challenge == id
		delete from PersonalFlag where parents_challenge == id
	} or {
		println('Error: 删除失败')
	}
}

fn update_challenge(db sqlite.DB) {
	// 修改题目
	id := os.input('修改题目编号:\n>').int()
	the_type := os.input('修改类型(name, diff, intro):\n>')
	match the_type {
		'name' {
			println(tasks[id-1].name)
			new_data := get_new_data()
			sql db {
				update Task set name = new_data where tid == id
			} or {
				println('Error: 修改失败')
			}
		} 'diff' {
			println(tasks[id-1].diff)
			new_data := get_new_data()
			sql db {
				update Task set diff = new_data where tid == id
			} or {
				println('Error: 修改失败')
			}
		} 'intro' {
			println(tasks[id-1].intro)
			new_data := get_new_data()
			sql db {
				update Task set intro = new_data where tid == id
			} or {
				println('Error: 修改失败')
			}
		} else {
			println('Error: 修改失败')
		}
	}
}

// 测试部分初始化函数
/*
pub fn test_main_function(mut db sqlite.DB) {
    the_data := sql db {
        select from Task
    } or { []Task{} }

    if the_data.len != 0 {
        return
    }

    data := [
        Task{
                type_text  :    'Crypto'
                flag       :    [
                                    PostFlag{flag : 'vyctf{adwa_is_the_best_crypto_player}'},
                                ]
                challenge       :    []PersonalFlag{}
                name       :    'fast_attack'
                diff       :    'normal'
                intro      :    'basectf的精神延续\n出题人:sudopacman\n附件:https://wwtk.lanzoum.com/i44iq2dppize\n远程环境:139.155.139.109:10000'
                max_score  :    300
                score      :    300
                container  :    false
        },

        Task{
                type_text  :    'Crypto'
                flag       :    [
                                    PostFlag{flag : 'vyctf{0010011100000101010011100001101111110101011001000101011111101001}'},
                                ]
                challenge       :    []PersonalFlag{}
                name       :    "Pell Company's A-level products"
                diff       :    'normal'
                intro      :    '我想拿它来做hash\n出题人:adwa\n附件:https://wwtk.lanzoum.com/iNvgK2dpql9c'
                max_score  :    300
                score      :    300
                container  :    false
        }
    ]
    
    for i in data {
        sql db {
            insert i into Task
        } or {
        println("Error: 存储数据出错")
        }
    }
}
*/